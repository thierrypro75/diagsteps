{% extends 'base.html.twig' %}

{% block title %}Diagnostic - {{ problemType.name }}{% endblock %}

{% block body %}
<div class="container-fluid mt-4">
    <h1 class="mb-4">{{ problemType.name }}</h1>
    
    <div class="row">
        <div class="col-md-4">
            <h2 class="mb-3">Étapes de diagnostic</h2>
            <div class="diagnostic-steps">
                {% for diagnosticStep in problemType.diagnosticSteps|filter(step => step.parent is null) %}
                    <div class="step-block mb-4" 
                         data-step-id="{{ diagnosticStep.id }}" 
                         data-goto="{{ diagnosticStep.goto }}" 
                         data-has-next="{{ diagnosticStep.nextStep ? 'true' : 'false' }}"
                         data-has-next-ko="{{ diagnosticStep.nextStepKo ? 'true' : 'false' }}"
                         data-type="{{ diagnosticStep.type }}">
                        <div class="step-header d-flex justify-content-between align-items-center p-3 rounded-top" 
                             style="background-color: {% if diagnosticStep.type == 'symptome' %}#4e73df{% elseif diagnosticStep.type == 'check' %}#f6c23e{% else %}#1cc88a{% endif %}; color: white;">
                            <h3 class="h5 mb-0">{{ diagnosticStep.description }}</h3>
                            <span class="step-type-badge">{{ diagnosticStep.type|capitalize }}</span>
                        </div>
                        <div class="step-content p-3 bg-white rounded-bottom border">
                            <div class="step-details">
                                {% if diagnosticStep.type == 'check' %}
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="check_{{ diagnosticStep.id }}">
                                        <label class="form-check-label" for="check_{{ diagnosticStep.id }}">
                                            Vérifié
                                        </label>
                                    </div>
                                {% elseif diagnosticStep.type == 'action' %}
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="action_{{ diagnosticStep.id }}">
                                        <label class="form-check-label" for="action_{{ diagnosticStep.id }}">
                                            Effectué
                                        </label>
                                    </div>
                                {% endif %}
                                
                                {% if diagnosticStep.needDoc %}
                                    <div class="mt-2">
                                        <span class="badge bg-info">Documentation requise</span>
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
        
        <div class="col-md-8">
            <h2 class="mb-3">Arbre de diagnostic</h2>
            
            <!-- Onglets -->
            <ul class="nav nav-tabs mb-3" id="diagnosticTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="tree-tab" data-bs-toggle="tab" data-bs-target="#tree-content" type="button" role="tab" aria-controls="tree-content" aria-selected="true">Vue arborescente</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="interactive-tab" data-bs-toggle="tab" data-bs-target="#interactive-content" type="button" role="tab" aria-controls="interactive-content" aria-selected="false">Interface interactive</button>
                </li>
            </ul>
            
            <!-- Contenu des onglets -->
            <div class="tab-content" id="diagnosticTabsContent">
                <!-- Onglet Vue arborescente -->
                <div class="tab-pane fade show active" id="tree-content" role="tabpanel" aria-labelledby="tree-tab">
                    <div id="diagnosticTree" class="diagnostic-tree">
                        <div class="alert alert-info initial-message">
                            Cliquez sur un symptôme pour afficher son arbre de diagnostic.
                        </div>
                    </div>
                </div>
                
                <!-- Onglet Interface interactive -->
                <div class="tab-pane fade" id="interactive-content" role="tabpanel" aria-labelledby="interactive-tab">
                    <div id="interactiveDiagnostic" class="interactive-diagnostic">
                        <div class="alert alert-info initial-message">
                            Cliquez sur un symptôme pour démarrer le diagnostic interactif.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/mermaid@11.6.0/dist/mermaid.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialiser Mermaid (peut rester si d'autres diagrammes sont utilisés)
    mermaid.initialize({
        startOnLoad: false, // Important: Ne pas démarrer au chargement
        theme: 'default',
        flowchart: {
            useMaxWidth: true,
            htmlLabels: true,
            curve: 'basis'
        }
    });

    // Gestion des étapes suivantes
    const checkboxes = document.querySelectorAll('.form-check-input');
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            if (this.checked) {
                // Trouver l'étape actuelle
                const currentStep = this.closest('.step-block');
                const gotoId = currentStep.dataset.goto;
                const hasNext = currentStep.dataset.hasNext === 'true';
                
                if (gotoId === "0" && !hasNext) {
                    // Rediriger vers la page d'accueil
                    window.location.href = "{{ path('app_home') }}";
                } else if (gotoId) {
                    // Trouver l'étape cible par son ID
                    const targetStep = document.querySelector(`.step-block[data-step-id="${gotoId}"]`);
                    if (targetStep) {
                        // Faire défiler jusqu'à l'étape cible
                        targetStep.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        
                        // Mettre en évidence l'étape cible
                        targetStep.classList.add('highlight');
                        setTimeout(() => {
                            targetStep.classList.remove('highlight');
                        }, 2000);
                    }
                } else {
                    // Si pas de goto, passer à l'étape suivante
                    const nextStep = currentStep.nextElementSibling;
                    if (nextStep) {
                        nextStep.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            }
        });
    });

    // Gestion des clics sur les blocs
    const stepBlocks = document.querySelectorAll('.step-block');
    stepBlocks.forEach(block => {
        block.addEventListener('click', function(e) {
            if (e.target.type === 'checkbox' || e.target.tagName === 'LABEL') {
                return;
            }
            
            const stepId = this.dataset.stepId;
            const stepType = this.dataset.type;
            // On récupère hasNext / hasNextKo pour la logique de redirection potentielle
            const hasNext = this.dataset.hasNext === 'true'; 
            const hasNextKo = this.dataset.hasNextKo === 'true';
            
            // Si c'est un symptôme, on affiche l'arbre (le hasNext/hasNextKo n'est plus nécessaire ici pour déclencher)
            if (stepType === 'symptome') { 
                showDiagnosticTree(stepId); 
                showInteractiveDiagnostic(stepId);
                stepBlocks.forEach(b => b.classList.remove('active-step'));
                this.classList.add('active-step');
            } else {
                 // Garder la logique de redirection si goto=0 et pas de next step
                 const gotoId = this.dataset.goto;
                 const currentHasNext = this.dataset.hasNext === 'true'; // Vérifier hasNext sur le bloc cliqué
                 if (gotoId === "0" && !currentHasNext) {
                     window.location.href = "{{ path('app_home') }}";
                 }
            }
        });
        
        block.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px)';
            this.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        });
        
        block.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
    });
    
    // Variables pour stocker l'historique du diagnostic
    let diagnosticHistory = [];
    let currentStepId = null;
    
    // Fonction pour afficher l'arbre de diagnostic (simplifiée)
    function showDiagnosticTree(stepId) {
        const treeContainer = document.getElementById('diagnosticTree');
        // Afficher un indicateur de chargement
        treeContainer.innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';

        // Récupérer le code Mermaid via AJAX
        fetch(`{{ path('app_diagnostic_tree') }}?stepId=${stepId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                if (data.mermaidCode) {
                    // Vider le conteneur
                    treeContainer.innerHTML = ''; 
                    // Créer l'élément Mermaid
                    const mermaidDiv = document.createElement('div');
                    mermaidDiv.className = 'mermaid';
                    treeContainer.appendChild(mermaidDiv);
                    // Injecter le code et rendre
                    mermaidDiv.textContent = data.mermaidCode;
                    mermaid.run({ nodes: [mermaidDiv] }); // Utiliser mermaid.run pour rendre dynamiquement
                } else {
                    treeContainer.innerHTML = '<div class="alert alert-warning">Aucun arbre de diagnostic à afficher pour cette étape.</div>';
                }
            })
            .catch(error => {
                console.error('Erreur lors de la récupération ou du rendu de l\'arbre Mermaid:', error);
                treeContainer.innerHTML = `
                    <div class="alert alert-danger">
                        Impossible de charger l'arbre de diagnostic. (${error.message})
                    </div>
                `;
            });
    }
    
    // Fonction pour afficher l'interface interactive
    function showInteractiveDiagnostic(stepId) {
        const interactiveContainer = document.getElementById('interactiveDiagnostic');
        // Afficher un indicateur de chargement
        interactiveContainer.innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';

        // Réinitialiser l'historique si c'est un nouveau diagnostic
        if (currentStepId !== stepId) {
            diagnosticHistory = [];
            currentStepId = stepId;
        }

        // Récupérer les données JSON via AJAX
        fetch(`{{ path('app_diagnostic_json') }}?stepId=${stepId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    throw new Error(data.error);
                }
                if (data.tree) {
                    // Vider le conteneur
                    interactiveContainer.innerHTML = '';
                    // Créer l'interface interactive
                    createInteractiveInterface(data.tree, interactiveContainer);
                } else {
                    interactiveContainer.innerHTML = '<div class="alert alert-warning">Aucune donnée de diagnostic à afficher pour cette étape.</div>';
                }
            })
            .catch(error => {
                console.error('Erreur lors de la récupération des données JSON:', error);
                interactiveContainer.innerHTML = `
                    <div class="alert alert-danger">
                        Impossible de charger les données de diagnostic. (${error.message})
                    </div>
                `;
            });
    }
    
    // Fonction pour créer l'interface interactive
    function createInteractiveInterface(treeData, container) {
        // Créer le conteneur principal
        const mainContainer = document.createElement('div');
        mainContainer.className = 'interactive-container';
        
        // Ajouter l'historique du chemin parcouru
        const historyContainer = document.createElement('div');
        historyContainer.className = 'diagnostic-history mb-4';
        
        // Titre de l'historique
        const historyTitle = document.createElement('h4');
        historyTitle.className = 'h6 mb-2';
        historyTitle.textContent = 'Chemin parcouru:';
        historyContainer.appendChild(historyTitle);
        
        // Liste des étapes parcourues (transformée en breadcrumb)
        const historyList = document.createElement('nav'); // Utiliser <nav> pour la sémantique
        historyList.setAttribute('aria-label', 'breadcrumb');
        historyList.className = 'breadcrumb-container'; // Nouvelle classe pour le style
        
        // Ajouter l'étape actuelle à l'historique si elle n'y est pas déjà
        if (diagnosticHistory.length === 0 || diagnosticHistory[diagnosticHistory.length - 1].id !== treeData.id) {
            diagnosticHistory.push({
                id: treeData.id,
                description: treeData.description,
                type: treeData.type // Garder le type pour la couleur potentielle si besoin
            });
        }
        
        // Afficher l'historique sous forme de breadcrumb
        diagnosticHistory.forEach((step, index) => {
            // Créer l'élément du breadcrumb
            const breadcrumbItem = document.createElement('span');
            breadcrumbItem.className = 'breadcrumb-item';
            
            // Si ce n'est pas la dernière étape, créer un lien
            if (index < diagnosticHistory.length - 1) {
                const breadcrumbLink = document.createElement('a');
                breadcrumbLink.href = '#';
                breadcrumbLink.textContent = step.description;
                breadcrumbLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    // Supprimer les étapes après celle-ci
                    diagnosticHistory = diagnosticHistory.slice(0, index + 1);
                    // Afficher cette étape
                    showInteractiveDiagnostic(step.id);
                });
                breadcrumbItem.appendChild(breadcrumbLink);
            } else {
                // Pour la dernière étape, afficher simplement le texte (étape active)
                breadcrumbItem.textContent = step.description;
                breadcrumbItem.classList.add('active'); // Marquer comme actif
            }
            
            // Ajouter l'élément au conteneur du breadcrumb
            historyList.appendChild(breadcrumbItem);
        });
        
        // Ajouter le breadcrumb à l'historique
        historyContainer.appendChild(historyList);
        
        // Ajouter l'historique au conteneur principal
        mainContainer.appendChild(historyContainer);
        
        // Créer l'élément pour afficher l'étape actuelle
        const currentStepElement = document.createElement('div');
        currentStepElement.className = 'current-step mb-4 p-4 rounded';
        currentStepElement.style.backgroundColor = getTypeColor(treeData.type);
        currentStepElement.style.color = 'white';
        
        // Ajouter la description
        const descriptionElement = document.createElement('h3');
        descriptionElement.className = 'h5 mb-3';
        descriptionElement.textContent = treeData.description;
        currentStepElement.appendChild(descriptionElement);
        
        // Ajouter le type
        const typeElement = document.createElement('span');
        typeElement.className = 'badge bg-light text-dark';
        typeElement.textContent = treeData.type.charAt(0).toUpperCase() + treeData.type.slice(1);
        currentStepElement.appendChild(typeElement);
        
        // Ajouter l'élément d'étape actuelle au conteneur principal
        mainContainer.appendChild(currentStepElement);
        
        // Créer les boutons de navigation
        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'd-flex justify-content-between mt-4';
        
        // Ajouter les boutons au conteneur principal
        mainContainer.appendChild(buttonsContainer);
        
        // Créer le conteneur pour les étapes suivantes
        const nextStepsContainer = document.createElement('div');
        nextStepsContainer.className = 'next-steps mt-4';
        
        // Titre pour les étapes suivantes
        const nextStepsTitle = document.createElement('h4');
        nextStepsTitle.className = 'h6 mb-3';
        nextStepsTitle.textContent = 'Étapes suivantes:';
        nextStepsContainer.appendChild(nextStepsTitle);
        
        // Conteneur pour les cartes des étapes suivantes
        const nextStepsCards = document.createElement('div');
        nextStepsCards.className = 'row';
        
        // Ajouter l'étape OK si elle existe
        if (treeData.nextStep) {
            // si c'est de type action, colorer en orange et si c'est de type check, colorer en jaune
            let colorClass = 'success'; // Default to success
            if (treeData.nextStep.type === 'action') {
                colorClass = 'orange';
            } else if (treeData.nextStep.type === 'check') {
                colorClass = 'yellow';
            }

            let okCard = createNextStepCard(treeData.nextStep, 'OK', colorClass); // Utiliser la variable colorClass ici
            nextStepsCards.appendChild(okCard);
        }
        
        // Ajouter l'étape KO si elle existe
        if (treeData.nextStepKo) {
            // si c'est de type action, colorer en orange et si c'est de type check, colorer en jaune
            let colorClass = 'danger'; // Default to danger
            if (treeData.nextStep.type === 'action') {
                colorClass = 'orange';
            } else if (treeData.nextStep.type === 'check') {
                colorClass = 'yellow';
            }
            let koCard = createNextStepCard(treeData.nextStepKo, 'KO', colorClass);
            nextStepsCards.appendChild(koCard);
        }
        
        // Si aucune étape suivante n'existe, afficher un message
        if (!treeData.nextStep && !treeData.nextStepKo) {
            const noNextStepsMessage = document.createElement('div');
            noNextStepsMessage.className = 'alert alert-info';
            noNextStepsMessage.textContent = 'Aucune étape suivante. Vous avez atteint la fin du diagnostic.';
            nextStepsContainer.appendChild(noNextStepsMessage);
        } else {
            // Ajouter les cartes au conteneur des étapes suivantes
            nextStepsContainer.appendChild(nextStepsCards);
        }
        
        // Ajouter le conteneur des étapes suivantes au conteneur principal
        mainContainer.appendChild(nextStepsContainer);
        
        // Ajouter le conteneur principal au conteneur parent
        container.appendChild(mainContainer);
    }
    
    // Fonction pour créer une carte d'étape suivante
    function createNextStepCard(stepData, label, colorClass) {
        const cardCol = document.createElement('div');
        cardCol.className = 'col-md-6 mb-3';
        
        const card = document.createElement('div');
        card.className = `card h-100 border-${colorClass}`;
        card.style.cursor = 'pointer';
        card.style.transition = 'all 0.3s ease';
        
        // Effet de survol
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px)';
            this.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
        
        // En-tête de la carte
        const cardHeader = document.createElement('div');
        cardHeader.className = `card-header bg-${colorClass} text-white d-flex justify-content-between align-items-center`;
        
        const headerTitle = document.createElement('h5');
        headerTitle.className = 'card-title mb-0';
        headerTitle.textContent = label;
        
        const typeBadge = document.createElement('span');
        typeBadge.className = 'badge bg-light text-dark';
        typeBadge.textContent = stepData.type.charAt(0).toUpperCase() + stepData.type.slice(1);
        
        cardHeader.appendChild(headerTitle);
        cardHeader.appendChild(typeBadge);
        
        // Corps de la carte
        const cardBody = document.createElement('div');
        cardBody.className = 'card-body';
        
        const cardText = document.createElement('p');
        cardText.className = 'card-text';
        cardText.textContent = stepData.description;
        
        cardBody.appendChild(cardText);
        
        // Ajouter les éléments à la carte
        card.appendChild(cardHeader);
        card.appendChild(cardBody);
        
        // Ajouter l'événement de clic
        card.addEventListener('click', function() {
            // Récupérer les données de l'étape suivante
            fetch(`{{ path('app_diagnostic_json') }}?stepId=${stepData.id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.tree) {
                        // Mettre à jour l'interface avec les nouvelles données
                        const container = document.getElementById('interactiveDiagnostic');
                        container.innerHTML = '';
                        createInteractiveInterface(data.tree, container);
                    }
                });
        });
        
        // Ajouter la carte à la colonne
        cardCol.appendChild(card);
        
        return cardCol;
    }
    
    // Fonction pour obtenir la couleur en fonction du type
    function getTypeColor(type) {
        switch (type) {
            case 'symptome':
                return '#4e73df';
            case 'check':
                return '#f6c23e';
            case 'action':
                return '#1cc88a';
            default:
                return '#6c757d';
        }
    }
});
</script>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
.container-fluid {
    padding: 0 30px;
}

.step-block {
    transition: all 0.3s ease;
    cursor: pointer;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.step-block.active-step {
    box-shadow: 0 0 0 3px #4e73df;
}

.step-header {
    transition: all 0.3s ease;
}

.step-type-badge {
    background-color: rgba(255, 255, 255, 0.2);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
}

.step-content {
    transition: all 0.3s ease;
}

.form-check-input:checked + .form-check-label {
    text-decoration: line-through;
    color: #6c757d;
}

/* Styles pour l'interface interactive */
.interactive-container {
    max-width: 800px;
    margin: 0 auto;
}

.current-step {
    transition: all 0.3s ease;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.btn {
    min-width: 100px;
    margin: 0 10px;
}

/* Styles pour l'historique */
.diagnostic-history {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

/* Styles pour le breadcrumb */
.breadcrumb-container {
    display: flex;
    flex-wrap: wrap; /* Permettre le retour à la ligne si nécessaire */
    padding: 0;
    margin: 0;
    list-style: none;
}

.breadcrumb-item {
    display: inline-flex; /* Aligner le lien et le séparateur */
    align-items: center;
    margin-right: 0.5rem; /* Espace entre les éléments */
    font-size: 0.9rem;
}

.breadcrumb-item a {
    color: #4e73df;
    text-decoration: none;
}

.breadcrumb-item a:hover {
    text-decoration: underline;
}

.breadcrumb-item.active {
    color: #6c757d; /* Couleur pour l'étape actuelle */
}

.breadcrumb-item+.breadcrumb-item::before {
    content: ">";
    margin-right: 0.5rem;
    color: #6c757d;
}

/* Couleurs spécifiques pour chaque type */
.step-block[data-type="symptome"] .step-header {
    background-color: #4e73df;
}

.step-block[data-type="check"] .step-header {
    background-color: #f6c23e;
}

.step-block[data-type="action"] .step-header {
    background-color: #1cc88a;
}

/* Animation de mise en évidence */
@keyframes highlight {
    0% { box-shadow: 0 0 0 0 rgba(78, 115, 223, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(78, 115, 223, 0); }
    100% { box-shadow: 0 0 0 0 rgba(78, 115, 223, 0); }
}

.highlight {
    animation: highlight 2s;
}

/* Styles pour l'arbre de diagnostic */
.diagnostic-tree {
    position: relative;
    min-height: 600px;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
    padding: 20px;
    overflow: auto;
}

.initial-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: auto;
    white-space: nowrap;
}

/* Styles Mermaid - Can be simplified as styles are now in classDef */
.mermaid {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
}

/* Keep general node text styling */
.mermaid .node text {
    fill: #333; /* Default text color, overridden by classDef where needed */
    stroke: none;
    font-family: Arial, sans-serif;
    font-size: 14px;
    /* dominant-baseline: central; */ /* Maybe adjust vertical alignment if needed */
    /* text-anchor: middle; */ /* Center text */
}

/* Keep edge styling */
.mermaid .edgeLabel {
    background-color: white;
    padding: 2px 5px;
    border-radius: 4px;
    font-size: 12px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.mermaid .edgeLabel.OK {
    color: #1cc88a;
    border: 1px solid #1cc88a;
}

.mermaid .edgeLabel.KO {
    color: #e74a3b;
    border: 1px solid #e74a3b;
}

.mermaid .edgePaths path {
    stroke-width: 1.5px;
}

/* Remove specific node type styles from CSS as they are now in classDef */
/* 
.mermaid .node.symptome rect { ... } 
.mermaid .node.symptome text { ... }
.mermaid .node.check polygon { ... }
.mermaid .node.check text { ... }
.mermaid .node.action rect { ... }
.mermaid .node.action text { ... } 
*/

/* Styles responsifs */
@media (max-width: 768px) {
    .container-fluid {
        padding: 0 15px;
    }
}

/* Ajout des couleurs personnalisées pour les cartes */
.border-orange {
    border-color: #fd7e14 !important; /* Bootstrap orange */
}

.bg-orange {
    background-color: #fd7e14 !important; /* Bootstrap orange */
}

.border-yellow {
    border-color:rgb(255, 217, 103) !important; /* Bootstrap yellow */
}

.bg-yellow {
    background-color:rgb(255, 217, 103) !important; /* Bootstrap yellow */
    color: #212529 !important; /* Texte foncé pour contraste sur fond jaune */
}
</style>
{% endblock %} 